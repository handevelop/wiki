MSA (마이크로 서비스 아키텍쳐)

# 개념
- 애플리케이션을 여러개로 나눠서 추상화 시킨 아키텍쳐.

# 장점
- 배포시간 단축.
- 테스트 기간 단축. (배포한 부분만 테스트하면 되므로 범위가 좁아짐)
- 영향력 최소화. (응집도를 loose 하게 하므로)
- 부분적인 스케일 아웃이 가능하므로 전체 스케일 아웃 필요가 없어짐.
- 프로그래밍 언어, 프레임 워크 교체가 가능.
- 특정 기능 장애 시 전체 서비스 장애로 이어지지 않음.
- 조직 문화 개선. (?)

# 모놀로식 아키텍쳐란?
- 코드의 변화가 영향을 미치는 범위가 커서 간단한 변화에도 통합 테스트가 필요.
- 배포가 비교적 간편하며 통합 시나리오 테스트가 손쉬움.
- 서비스가 복잡해지면 중복된 소스코드가 생김.
- 언어와 프레임워크 변경이 불가능.

# 마이크로서비스 아키텍쳐란?
- DB가 각 서비스 마다 존재 하는 경우가 흔함. 그 이유는 MSA 를 최대한 활용하기 위함.
- 각 서비스들은 REST API 를 이용ㅇ해 다른 서비스들과 연동하여 API Gateway를 통해 클라이언트에게 데이터를 제공.
- API Gateway가 생김에 따라 관리 포인트가 증가하고, 서비스가 쪼개지기 때문에 배포가 많아지므로 배포 자동화가 필수가 됨.
- 도커 등의 컨테이너가 필요해짐.

# API Gateway 란?
- 기존에는 클라이언트가 모든 서비스들의 호스트명과 end-point를 알고 있어야 하였음.
- 요청을 보내야 하는 서비스가 많아지면 많아질수록 응답속도도 느려졌음.
- 요청을 위해 각 서비스들의 end-point에 따라 어떤 서비스에 요청을 보낼지 명시해 주어야 하기 때문에 코드가 길어졌음.
- 그러나 APIT Gateway 를 클라이언트와 서비스 사이에 두어서 프로토콜을 변환해주고 시스템을 내부로 숨겨서 위 문제를 해결함.
- 또한 API Gateway는 로드밸런서와 캐싱 모니터링 기능도 함.
