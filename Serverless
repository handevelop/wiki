서버리스(Serverless) 아키텍쳐는 "서버가 없는 아키텍쳐" 가 아니라 "서버의 존재에 대해서 신경쓰지 않아도 되는 아키텍쳐" 이다.

서버리스 아키텍쳐를 이해하기 위해서는 IaaS, PaaS, BaaS, FaaS 등을 이해해야 한다.

#IaaS(Infrastructure as a Service)
인프라를 가상화하여 관리하기 쉽게 해주는 서비스.
서버자원,네트워크,전력 등 인프라를 직접 구축할 필요없이 관리자 패널에서 인프라를 구성하여 사용하면 된다.

#PaaS(Platform as a Service)
IaaS 에서 한번 더 추상화된 모델. 네트워크와 런타임 까지 추상화 되어 제공된다.
애플리케이션만 배포하여 구동시킬 수 있게 된다.
AWS Elastic Beanstalk, Azure App Services 등이 있다.

#BaaS(Backend as a Service)
서버 개발을 하다보면 서버의 확장, 보안성 등을 고려하면서 개발을 해야한다. 이런 부분을 API 를 제공하여 개발자는 서버 개발을
하지않고 필요한 기능을 쉽고 빠르게 구현하기만 하는 것을 말한다. 사용한만큼 비용을 내고 서버의 증축 등을 대비 안해도 된다.
장점으로는 개발 시간의 단축, 서버 확장 작업의 불필요함 등이 있다.
단점으로는 클라이언트 위주의 코드 작성과 가격, 복잡한 쿼리가 불가능한 점 등이 있다.
Firebase 등이 있다.

#FaaS(Function as a Service)
프로젝트를 여러개의 함수로 쪼개서 분산된 컴퓨팅 자원에 준비한 함수를 등록하고 이 함수들이 실행되는 횟수만큼 비용을 내는 방식.
함수를 특정 이벤트가 발생했을 때 실행하게 하여 주기적으로 실행해야 할 때 유용하다. 주기적인 크롤링 작업이나 배치작업 등에 유용하다.
또한 특정 url 으로 들어오면 어떠한 작업을 하게끔 백엔드 API 를 구성 할수도 있다.
PaaS 는 애플리케이션이 24시간 돌아가지만 FaaS는 함수의 호출과 종료 사이에만 돌아가며 작업이 끝나면 종료된다.
장점
1.비용: 특정 작업을 하기 위하여 서버를 준비하고 하루종일 켜놓는것이 아니라, 필요할때만 함수가 호출되어 처리되며 함수가 호출된 만큼만 비용이 드므로, 비용이 많이 절약됩니다.
2.인프라 관리: 네트워크, 장비 이런것들에 대한 구성 작업을 신경 쓸 필요 없습니다.
3.인프라 보안: 리눅스 업데이트, 최근 발생한 Intel Meltdown 취약점 보안패치, 이런것들 또한 신경 쓸 필요 없습니다.
4.확장성: FaaS 는 확장성 면에서 매우 뛰어납니다. 일반적으로, FaaS 를 사용하지 않는다면, 다양한 트래픽에 유연한 대응을 하기 위하여 우리는 AWS 의 Auto Scaling 같은 기술을 사용합니다. 이를 통하여 CPU 사용량, 네트워크 처리량에 따라 서버의 갯수를 늘리는 방식으로 처리를 분산시키는데요, FaaS 를 사용하게 되면 이렇게 특정 조건에 따라 자동으로 확장되는 것이 아닙니다. 그냥, 확장됩니다. 함수가 1초에 1개가 호출되면 1개가 호출되는것이고, 100,000,00 개가 호출되면 100,000,00 개가 호출되는것입니다. 그리고 호출된 횟수 만큼 돈을 내는거죠.

단점
1.제한: 모든 코드를 함수로 쪼개서 작업하다보니, 함수에서 사용 할 수 있는 자원에 제한이 있습니다. 하나의 함수가 한번 호출 될 때, AWS 에서는 최대 1500MB 의 메모리까지 사용 가능하며, 처리시간은 최대 300 초 까지 사용 가능합니다. 때문에, 웹소켓 같이 계속 켜놔야 하는것은 사용하지 못합니다. 그 대신에, AWS IoT, Pusher 등의 서비스를 사용하면 됩니다.
2.FaaS 제공사에 강한 의존: AWS, Azure, Google 등의 FaaS 제공사에 강한 의존을 하게 됩니다. 즉, 갑자기 이 회사들이 망해버리면…? 정말 골치 아프겠죠. 물론 가능성은 매우 희박합니다.
3.로컬 데이터 사용 불가능: 함수들은 무상태적(stateless)입니다. 때문에, 데이터를 로컬 스토리지에서 읽고 쓸 수 없습니다. 그 대신에, AWS 라면 S3, Azure 라면 Storage 를 이용 할 수 있습니다.
4.비교적 신기술: FaaS 는 비교적 새로운 기술 입니다. 물론 AWS 에서 Lambda 는 2014년에 등장하긴 했지만요, 주관적으로 보기엔, 2016년쯤 사용률이 올라가기 시작했으며, 이제 기업에서 사용한 사례들도 여럿 등장하며 자리를 잡아가고 있습니다. 2018년, 아직까지는, 해외에서는 관련 자료들을 볼 수 있는 반면, 국내에서는 관련 자료를 찾아보기가 힘듭니다. 아마 2020년 쯤에는 조금 더 국내에서도 관련 자료를 많이 찾아 볼 수 있을 것이라 예상합니다.

Use case
그렇다면, FaaS 는 어떤 용도로 사용 될 수 있을까요? 다음 예제들을 살펴보면 감이 잡힐 것입니다.
•Backend: 서비스의 백엔드를 FaaS 로 구현 할 수 있습니다.
•Crawler: 주기적으로 페이지를 긁어서 수집 할 수 있습니다.
•파일 처리: 파일을 업로드하고, 화질/사이즈를 조정하고, S3 같은 스토리지에 저장하는 기능을 구현 할 수 있습니다.
•로그 분석 / 실시간 모니터링: 예를 들어, 특정 컴퓨팅 자원이 CPU 사용량이 70% 에 도달 했을 때, Slack 등을 통하여 알림을 받고 싶다면 AWS 의 Cloudwatch/CloudTrail 과 연동하여 알림을 받을 수 있습니다.
•자동화 작업들: Netflix 의 경우엔, 동영상이 됐을 때, 인코딩하고, 검증하고, 태깅하고, 공개하는 작업들을 Lambda 를 통하여 자동화 시켰습니다. 그리고 또, 백업 관련 작업도 Lambda 로 처리했다고 합니다.
•수많은 것들을 할 수 있습니다!
